// Number of BST
import java.io.*;
import java.util.*;

public class Solution {
  public static class Node {
    int data;
    Node left;
    Node right;

    Node(int data, Node left, Node right) {
      this.data = data;
      this.left = left;
      this.right = right;
    }
  }

  public static class Pair {
    Node node;
    int state;

    Pair(Node node, int state) {
      this.node = node;
      this.state = state;
    }
  }

  public static Node construct(Integer[] arr) {
    Node root = new Node(arr[0], null, null);
    Pair rtp = new Pair(root, 1);

    Stack<Pair> st = new Stack<>();
    st.push(rtp);

    int idx = 0;
    while (st.size() > 0) {
      Pair top = st.peek();
      if (top.state == 1) {
        idx++;
        if (arr[idx] != null) {
          top.node.left = new Node(arr[idx], null, null);
          Pair lp = new Pair(top.node.left, 1);
          st.push(lp);
        } else {
          top.node.left = null;
        }

        top.state++;
      } else if (top.state == 2) {
        idx++;
        if (arr[idx] != null) {
          top.node.right = new Node(arr[idx], null, null);
          Pair rp = new Pair(top.node.right, 1);
          st.push(rp);
        } else {
          top.node.right = null;
        }

        top.state++;
      } else {
        st.pop();
      }
    }

    return root;
  }

  public static void display(Node node) {
    if (node == null) {
      return;
    }

    String str = "";
    str += node.left == null ? "." : node.left.data + "";
    str += " <- " + node.data + " -> ";
    str += node.right == null ? "." : node.right.data + "";
    System.out.println(str);

    display(node.left);
    display(node.right);
  }
   
  public static class IsBSTSolver{
      int max,min,lBstSize;
      boolean isbst;
      Node lBstNode;
      
      IsBSTSolver(int min,int max,boolean isbst,int lBstSize,Node lBstNode){
          this.min = min;
          this.max = max;
          this.isbst = isbst;
          this.lBstSize = lBstSize;
          this.lBstNode = lBstNode;
      }
  }

  static int count;
  public static IsBSTSolver checkBst(Node node){
      if(node == null){
          return new IsBSTSolver(Integer.MAX_VALUE,Integer.MIN_VALUE,true,0,null);
      }
      IsBSTSolver lres = checkBst(node.left);
      IsBSTSolver rres = checkBst(node.right);
      
      int min = Math.min(node.data,Math.min(lres.min,rres.min));
      int max = Math.max(node.data,Math.max(lres.max,rres.max));
      boolean isbst = lres.isbst && rres.isbst && node.data > lres.max && node.data < rres.min;
      Node lBstNode;
      int lBstSize;
      if(isbst){
          lBstNode = node;
          lBstSize = lres.lBstSize + rres.lBstSize + 1;
          count++;
      }else{
          if(lres.lBstSize >= rres.lBstSize){
              lBstNode = lres.lBstNode;
              lBstSize = lres.lBstSize;
          }else{
              lBstNode = rres.lBstNode;
              lBstSize = rres.lBstSize;
          }
      }
      return new IsBSTSolver(min,max,isbst,lBstSize,lBstNode);
  }
  public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    int n = Integer.parseInt(br.readLine());
    Integer[] arr = new Integer[n];
    String[] values = br.readLine().split(" ");
    for (int i = 0; i < n; i++) {
      if (values[i].equals("n") == false) {
        arr[i] = Integer.parseInt(values[i]);
      } else {
        arr[i] = null;
      }
    }

    Node root = construct(arr);
    count = 0;
    checkBst(root);
    
    System.out.println(count);
  }

}



// RADAR
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Stack;

public class Solution{
    public static class Node{
        String locName;
        Node left,right;
        Node(String locName ,Node left,Node right){
            this.locName = locName;
            this.left = left;
            this.right = right;
        }
    }
    public static class Pair{
        Node node;
        int state;
        Pair(Node node,int state){
            this.node = node;
            this.state = state;
        }
    }
    public static Node construct(String[] input){
        Node root = new Node(input[0],null,null);

        Stack<Pair> st = new Stack<>();
        st.push(new Pair(root, 0));
        int idx = 1;

        while(st.size() > 0){
            Pair top = st.peek();

            if(top.state == 0){
                String val = input[idx++];
                if(!val.equals("null")){
                    top.node.left = new Node(val,null,null);
                    st.push(new Pair(top.node.left,0));
                }
                top.state++;
            }else if(top.state == 1){
                String val = input[idx++];
                if(!val.equals("null")){
                    top.node.right = new Node(val,null,null);
                    st.push(new Pair(top.node.right,0));
                }
                top.state++;
            }else{
                st.pop();
            }
        }

        return root;
    }

    public static void display(Node node){
        if(node != null){
            System.out.print(node.left == null ? "." : node.left.locName);
            System.out.print(" <- "+node.locName+" -> ");
            System.out.println(node.right == null ? "." : node.right.locName);

            display(node.left);
            display(node.right);
        }
    }
    
    public static void printKLevelsDown(Node node, int k){
        if(node == null){
            return;
        }
        if(k == 0){
            // System.out.println(node.locName);
            countOfEnemyLookout++;
            return;
        }
        // System.out.println(node.locName);
        countOfEnemyLookout++;
        printKLevelsDown(node.left,k-1);
        printKLevelsDown(node.right,k-1);
    }
    
    public static ArrayList<Node> nodeToRootPath(Node node, String data){
        if(node == null){
            return new ArrayList<>();
        }
        if(node.locName.equals(data)){
            ArrayList<Node> al = new ArrayList<>();
            al.add(node);
            return al;
        }
        
        ArrayList<Node> lres = nodeToRootPath(node.left,data);
        if(lres.size() > 0){
            lres.add(node);
            return lres;
        }
        ArrayList<Node> rres = nodeToRootPath(node.right,data);
        if(rres.size() > 0){
            rres.add(node);
            return rres;
        }
        return new ArrayList<>();
    }
    
    static int countOfEnemyLookout;
    public static void printKNodesFar(Node node, String data, int k) {
        ArrayList<Node> list = nodeToRootPath(node,data);
        
        printKLevelsDown(list.get(0),k);
        
        for(int idx = 1 ; idx < list.size() ; idx++){
            countOfEnemyLookout++;
            int remDist = k - idx;
            Node curr = list.get(idx);
            Node prev = list.get(idx-1);
            if(remDist == 0){
                // System.out.println(curr.locName);
                break;
            }else{
                if(curr.left == prev){
                    printKLevelsDown(curr.right , remDist-1);
                }else if(curr.right == prev){
                    printKLevelsDown(curr.left , remDist-1);
                }
            }
        }
    }
    
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        String[] input = br.readLine().split(" ");
        String enemyLookoutLocation = br.readLine();
        int dist = Integer.parseInt(br.readLine());

        // System.out.println(Arrays.toString(input));
        Node root = construct(input);
        // display(root);
        
        countOfEnemyLookout = 0;
        printKNodesFar(root, enemyLookoutLocation, dist);
        System.out.println(countOfEnemyLookout);
    }
}
/*
nexus A3 null null A4 B1 null null B2 B3 null null E4 E6 Z7 null null null E7 E8 F16 G1 G2 null null G3 null null null F14 F19 G6 null null null F20 null G8 null null E9 I6 null null I7 I8 null null I9 null null
E8
3
*/